#include "ws2811.h"

extern "C" {
#include <cstdlib>

#include "ws2811.pio.h" // header autogenerated by CMake (see pico_generate_pio_header). 
                        // Manually generate it with pioasm -o c-sdk ws2811.pio > ws2811.pio.h

#include "hardware/pio.h"
}

/**
* 24-bit Red-Green-Blue data in the most significant bits
*/



// class Buf {
//     private:
//     int32_t data[3];
//     int lsb_ix = 0; // index to least significant bit (end of data)
//     int len = 0;    // number of slots filled

//     public:
//     // easier if RGB on MSB - 0x776655 is 0x77665500, also aligns with struct
//     void add(int32_t rgb) {
//         // pack rgb MSBs into last byte post-LSBs
//         // two MSBs
//         // first byte
//         data[0] = rgb1; 
//         // 0x 77 66 55 00

//         // second byte 
//         int8_t ms8b = (rgb && 0xFF'00'00'00) >> 24; // get first 8 bits (Red)
//         data[0] += ms8b;               // append it
//         data[1] = (rgb & 0x00'FF'FF'00) << 8;      // store Green and Blue
//         // 0x 77 66 55 77 66 55 00 00

//         // third byte

//     }
// }

WS2811::WS2811(uint num_leds, uint bps, uint8_t pin) : num_leds_(num_leds)  {
    bool is_added = pio_claim_free_sm_and_add_program(&ws2811pio_program, &pio_, &sm_, &offset_);
    if (!is_added) { 
        assert("Failed to load pio program");
        abort(); 
    }
    
    ws2811pio_program_init(pio_, sm_, offset_ , pin, bps); 
    
}


WS2811::~WS2811() {
    pio_remove_program_and_unclaim_sm(&ws2811pio_program, pio_, sm_, offset_);
}


void WS2811::test() {
    
    int32_t rgb[] = {(int32_t)0xFF'00'00'00, (int32_t)0x00'FF'00'00, (int32_t)0x00'00'FF'00};
    for (int i = 0; i < 3; i++) {
        pio_sm_put_blocking(pio_, sm_, rgb[i]);
    }
    
}


